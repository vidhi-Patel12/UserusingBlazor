@page "/fetchuserdetails"
@using UserprojectusingBlazor.Shared.Models
@inject HttpClient Http
<h1 style="text-align:center;">User Data</h1>
@* <p>Blazor CRUD operation</p>*@
<div class="row">
    <div class="col-md-10">
        <a href='/user/add' class="btn btn-primary" role="button">
            <i class="fas fa-user-plus"></i>
            Add User
        </a>
    </div>
    <div class="input-group col">
        <input type="text" class="form-control" placeholder="Search User By Name"
        @bind="SearchString" @bind:event="oninput" @onkeyup="FilterUser" /> &nbsp;&nbsp;
        @if (SearchString.Length > 0)
        {
            <div class="input-group col">
                <button class="btn btn-danger" @onclick="ResetSearch">
                    <i class="fas fa-times"></i>
                    Cancel
                </button>
            </div>
        }
    </div>
</div>
<br />
@if (userList == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table table-striped align-middle table-bordered">
        <thead class="table-success" style="text-align: center;">
            <tr>
                <th>UserId</th>
                <th>UserName</th>
                <th>E-mail</th>
                <th>Password</th>
                <th>Address</th>
                <th>Contact</th>
                <th>Action</th>

            </tr>
        </thead>
        <tbody style="text-align: center;">
            @foreach (var user in userList)
            {
                <tr>
                    <td>@user.UserId</td>
                    <td>@user.UserName</td>
                    <td>@user.Email</td>
                    <td>@user.Password</td>
                    <td>@user.Address</td>
                    <td>@user.Contact</td>
                    <td>
                        <a href='/user/edit/@user.UserId' class="btn btn-outline-dark" role="button">
                            Edit
                        </a>
                        <a href='/user/delete/@user.UserId' class="btn btn-outline-danger" role="button">
                            Delete
                        </a>
                    </td>
                </tr>
            }
        </tbody>

    </table>
}
@code {
    public List<UserClass> userList = new();
    public List<UserClass> searchUserData = new();
    public UserClass user = new();
    protected string SearchString { get; set; } = string.Empty;
    protected override async Task OnInitializedAsync()
    {
        await GetUser();
    }
    protected async Task GetUser()
    {
        userList = await Http.GetFromJsonAsync<List<UserClass>>("api/User");
        searchUserData = userList;
    }
    protected void FilterUser()
    {
        if (!string.IsNullOrEmpty(SearchString))
        {
            userList = searchUserData
                .Where(x => x.UserName.IndexOf(SearchString, StringComparison.OrdinalIgnoreCase) != -1)
                .ToList();
        }
        else
        {
            userList = searchUserData;
        }
    }
    protected void DeleteConfirm(int userID)
    {
        user = userList.FirstOrDefault(x => x.UserId == userID);
    }
    public void ResetSearch()
    {
        SearchString = string.Empty;
        userList = searchUserData;
    }
}